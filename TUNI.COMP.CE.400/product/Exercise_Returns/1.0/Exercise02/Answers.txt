INCLUDE ANSWERS IN HERE

1. What is the purpose of SystemC?
Ans: SystemC is not a language but a library of C++ that is used to model hardware by the use of classes, interrupts and software logic for verification. SystemC is diverse in a sense that it provide complete integration between software, hardware and then their verification.

2. What does macro SC_MODULE do from user perspective?
Ans: It is similar to a class but in terms of hardware it can also be said as a container of functionality with state, behaviour and structure for hierarial connectivity. It can have defined IN/OUT that can be in present physical curcuit.

3. What does macro SC_CTOR do from user perspective?
Ans: It is a constructor inside the module(class) and has the same concept/functionality as that of C++. It is called automatically and only once when the object of the class/module is created. Usually it is used for initializing variables and threads in the start or set the starting values or the defaults.

4. What is the difference between SC_THREAD, SC_METHOD, and SC_CTHREAD?
Ans: SystemC has three threads SC_THREAD, SC_METHOD, SC_CTHREAD
SC_METHOD - 
	1. Resembles to an always block in verilog. 
	2. Wait() can not be called because it does not have its own thread of execution.
	3. Synthesizable for simple logic operations.
	4. Takes a single parameter which is the name of the function.
	5. May have static sensitivity.

SC_THREAD -
	1. Resembles to an initial block in verilog. 
	2. Execute only for one clock cycle. 
	3. Not Synthesizable. It is only for simulations.
	4. example: counter increment

SC_CTHREAD - 
	1. Sysnthesizaable.
	2. Work for single or multiple clock cycle
	3. Take two inputs as parameters 
	4. Can call wait() because it has its own thread of execution.
	5. Has no separate sensitivity list as SC_METHOD or SC_THREAD.
	6. Is activated whenever the specified clock edge occurs.
	7. Requires a clock when registering a process.
	8. Does not have static sensitivity.

5. Original model does not specify implementation for c1, c2, and v1.
What was implementation of channels and the variable in this exercise?
Ans: 
1. channel C1 and c2 are a message queues which is a software logic to store data and can be defined as a one way pipe where one process writes/push the data in a sequence and the other takes it out until compete data is collected. 
2. Variable V1 is a shared memory that can be read and written by more than one process. 

6. What does the file test_bench.cpp do?
Ans: In broader terms Test_bench.cpp verifyes the functionality i.e. Is the result equal before and after decoding. It contains definition of 3 functions which are declared as SC_CTHREAD in testbench.hh. It opens the input file and sends the input value to the system we created. After encoding and decoding it then recieves the value and check it with the Original value. If the value is same it prints the success message else an error. In this way it is used as a verification module.

7. What is the purpose of the application GTKWave?
Ans: GTK wave is the simulation software. Simulations are important to verify the logic and the result before its implementation on FPGA or hardware. It plays a significant role in reducing the cost of prototyping. 
	
8. In this exercise, memory was merely used as an external storage. However, in practical computing
the memory is likely used directly by CPU as in caches and DDR. Why speed of these is important?
Ans: Since systems are designed to play a series of instructions in a manner in a less possible time. To execute each instruction as fast as possible without any data loss is the key goal of each system. But handling multiple instructions simutaneously to increase speed give rise to big challenges that are encountered in realtime. Hence to track each instant inorder to attain perfect speed the adjustment of delays are a must alongwith multiple checks or flags. 
Also due to the fact these are clock operated devices so each instant is planned and defined on every rise or low edge of a clock which explains the explains the importance of their speed. A little speed mismatch can create a big data mismatch which is indeed a big loss.
	
9. In this exercise, we had the option of directly affecting the memory speed.
Why this may be difficult on real platforms?
Ans: In reality each device has its own certain specifications which we have to consider while planning. Multiple hardware developed by different companies when joined to form a required product all specifications of each device restricts us from taking entire control. Whereas, in this exercise each component is designed by us and we can adjust where ever it is requried.

10. What the was the final performance of your system? Answer this BEFORE the bonus section!
	Ans: By reducing the delay to 1/10 the current consumed time 650 ns was dropped to 430ns which is 1/3 drop from the previous 650ns value.

11. What was hard? What was easy?
	1. Debugging run time error was hard. 
	2. Creating make file was an issue which still last. We were unable to generate make file using kactus yet we creatd it by duplicating the previous make file in some other file and by smartly editing its code according to my project files.
	3. Solving the problem and getting familiar with the code at the same time was also time consuming. 
	4. Generating wave file was easy and worth viewing because it is an asset for debugging.
	5. Starting part was easy where we have to run the files and test them. 

12. Fill the used hours below, including answering questions and any downtime:

	GROUP MEMBER 1:Hamzah Farooq
	GROUP MEMBER 2:Hamza Ghani Shahid
	GROUP MEMBER 3:Hippolyte Foulongne
	
***BONUS SECTION ANSWERS***

13. What components did you choose? What was the price? What was the performance?

14. Following setup is used for streaming 4K video:
4K monitor <- HDMI 1.3 <- PC <- 5 Mbps internet <- Content service
What is wrong with the setup? Hint: Search answers from articles and specifications if you do not know.
