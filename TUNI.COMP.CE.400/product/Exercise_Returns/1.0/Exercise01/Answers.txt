INCLUDE ANSWERS IN HERE

1. What is the focus of the exercise project (=all exercises)? Why?
Hint: Read the exercise project summary from Moodle
Hint 2: Implementing a video encoder is NOT the focus of the exercises.

ANS: 1-To make a person intergrate in future work environment of some company with existing projects and to work on them through exixting repositories.
     2- Analyze and understand an existing system and being able to apply the modification we need.
     3- To understand and setup the coding enviornment. To carry up ongoing projects and deliver the further deliverables till completion. 

*** PART ONE ***

Some of the questions may involve examining the txt-files generated while encoding.

2. How much time did the encoding take? Look at the "Total CPU time".

	QP 50: 47.823 s
	GROUP QP(32): 93.834 s

3. How many frames were encoded per second (FPS)?

	QP 50: 2,55 FPS
	GROUP QP(32): 1,31 FPS

4. How did decreasing the quantization value affect perceived quality of the video output?

ANS: The Higher QP Value made the Video Blurry and Pixilated compared to the one with the lowered QP(32) value assigned to us

5. How did decreasing the quantization value affect size of the video output file?
  
ANS: The Higher QP(50) Value had smaller affect size (439 KiB) than that of the Lowered QP(32) Value which had the size (3361 KiB)

7. What was average PSNR?

	QP 50: (30.9363 36.1453 36.8616)
	GROUP QP(32): (40.1490 41.8909 42.3022)

8. What was the data compression ratio of encoding using your assigned quantization value?
Data compression ratio is defined as (size of the video input file)/(size of the video output file).

	QP 50: 830,3
	GROUP QP: 108,5

*** PART TWO ***

9. What was average PSNR of the profiling run?
ANS: AVG PSNR: 40.1490 41.8909 42.3022

10. What does parameter -pg do in GCC? How it affects the resulting executable and its execution?
ANS: As understood by us through online research we concluded that by using the [-pg] parameter in 'gcc' the profiler will figure out what function called it, and count how many times it was called. So if we link our program with [-pg] it automatically uses the profiling version of the used library.

11. Which three (3) functions use most time in Kvazaar? Answer based on the time used by functions
alone, not by the functions they call.
ANS: 1- kvz_angular_pred_generic 45,12%
     2- partial_butterfly_32_generic 13,45%
     3- kvz_quant_generic 6,68%

12. Why it is better to look at percentages rather than absolute time like seconds or milliseconds while using a profiling tool (like gprof)?
ANS: It is easy to Compare percentages which can map between 0 to 100% rather than time, which might be in long decimal values of milliseconds.

13. Which function would you choose for hardware acceleration? If there are multiple good candidates, choose one.
ANS: kvz_angular_pred_generic

14. What does that function do? Why do you think it's a good candidate for hardware acceleration?
Mention at least two reasons.
Hint: Look at the source code at Kactus2 location TUNI.fi->ip.sw->Kvazaar->0.7.2->src
ANS: It generates angular prediction as mentioned in the file intra-generic.c, And it is a good canidate because it has a lot of functianality built into it and if ve accelerate this fucntion we can make our system fast. Also many other functions up the line are depending on this function to complete.

15. How are you feeling? What was hard? What was easy?
ANS: It was a well compiled exercise for start of System Design Labs to get familiar with Kavazar. The hard thing for some of us was work in linux environment after a long time and some new tools to fimiliarize with. The Instruction details were Easy to follow.

16. Fill the used hours below, including answering questions and any downtime:
ANSWER THE HOURS AS IF YOU WERE PAID FOR IT (we will not pay you, though)

	GROUP MEMBER 1(Hamza Ghani Shahid): 6 Hours
	GROUP MEMBER 2(Hamzah Farooq): 6 Hours
	GROUP MEMBER 3(Hippolyte Foulongne): 6 Hours
